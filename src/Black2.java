
import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author MasterWard
 */
public class Black2 extends javax.swing.JPanel {

    // private String ans[] = {"Reverse", "Left", "Kia", "Reverse", "Right", "Reverse", "Left", "Reverse", "Reverse", "Reverse", "Reverse"}; // FOr debugging can delete later
    private int answer[] = {2, 4, 1, 3, 1, 2, 1, 3, 1, 4, 2, 1, 2, 3, 4, 3, 1, 2, 1, 2, 1, 2, 1}; // Answers in int form
    private int selection = 0; // Variable that holds the player's response to a highlighted section of the text
    private int index = 0; // Index of answers on
    private String options[] = {" ", "Reverse", "Left", "Right", "Kia", "", "", ""}; // The options to choose
    private JTextField textFields[];
    public JFrame messages = new JFrame("JOptionPane showMessageDialog example");
    public Object messageoptions[] = {"Exit To Main Menu", "Quit Game", "Next Kata"};
// This also means that 0 is nothing, 1 is reverse, 2 is left, 3 is right and 4 Kia in the selection array.

    /**
     * White belt Interactive Form
     */
    public Black2() {
        initComponents();
        initialPaint();
    }
    
    /**
     * Method that paints the first frame of the level
     */
    private void initialPaint()
    {
        // Erase the text from all text boxes
        for (int i = 0; i < answer.length; i++)
        {
            textFields[i].setText("");
        }
        
        // Paint the first text box yellow since we start there
        textFields[0].setBackground(Color.yellow);
    }

    /**
     * Method that deals with the painting of JTextFields based on selection and
     * answer arrays
     */
    private void paintingNew() {
        if (selection == answer[index]) // The player was correct, so let's move on
        {
            textFields[index].setText(options[answer[index]]);
            textFields[index].setBackground(Color.green); // Turn the previous highlight green
            index++;
            if (index == answer.length)
            {
                // Display a congratulatory text box here and ask the player if they want to return to the main menu or exit
                JOptionPane.showMessageDialog(null, "Congratulations, You Completed The Kata! Now Go Put These Steps Into Practce!");
                
                int choice = JOptionPane.showOptionDialog(null,
                        "Do You Want To Return To The Main Menu, Exit The Game, Or Move Onto The Next Kata?",
                        "Next Steps", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, messageoptions, null);
                switch (choice)
                {
                    case 0:
                        Main.display.DisplayMainMenu(false, true, false);
                        break;
                    case 1:
                        // Kill all threads and exit
                        try
                        {
                            Main.display.kill();
                            JOptionPane.showMessageDialog(null, "Thanks For Playing!");
                            System.exit(0);
                        }
                        catch (Exception closeException)
                        {
                            JOptionPane.showMessageDialog(null, "Something Went Wrong When Attempting To Kill Program Threads. Force Closing Program.");
                            System.exit(0);
                        }
                    case 2:
                        Main.display.kataContentPane.removeAll();
                        Main.display.kataContentPane.add(new Black2());
                        Main.display.kataContentPane.repaint();
                        Main.display.displaywindow.pack();
                        break;
                    default:
                        break;
                }
            }
            else
                textFields[index].setBackground(Color.yellow); // Highlight the next text box yellow
        }
        else // The player was wrong
        {
            textFields[index].setBackground(Color.red); // Set the highlight color to red
            textFields[index].setText(options[selection]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(204, 204, 204));
        setMaximumSize(new java.awt.Dimension(1610, 910));
        setMinimumSize(new java.awt.Dimension(1610, 910));
        setName("White Belt"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1610, 910));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("BECOME A BLACK BELT TO LEARN THIS MYSTERIOUS KATA!!!!");
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 1510, 650));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
